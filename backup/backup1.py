#!/usr/bin/env python
"""
========
Ctang, A map of mean max and min of ensembles
        from CORDEX AFR-44, in Southern Africa
        Data was restored on titan
========
"""
import math
import subprocess
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
from scipy import stats
from matplotlib.ticker import AutoMinorLocator
from mpl_toolkits.basemap import Basemap , addcyclic
import textwrap


# to load my functions
import sys 
sys.path.append('/Users/ctang/Code/My_Python_Code/')
import ctang

#=================================================== Definitions
N_region = 9
N_model = 10
VAR = 'rsds'

#---------------------------------------------------  data
# 11 * 9 table: generated by time.variability.function.sh

    #               region_1 region_2 ... region_N_region
    #  model_1
    #  model_2
    #  ...
    #  model_N_model
    #  ens
#--------------------------------------------------- 

MODEL=(\
        'CCCma-CanESM2_SMHI-RCA4_v1',\
        'CNRM-CERFACS-CNRM-CM5_SMHI-RCA4_v1',\
        'CSIRO-QCCCE-CSIRO-Mk3-6-0_SMHI-RCA4_v1',\
        'ICHEC-EC-EARTH_SMHI-RCA4_v1',\
        'IPSL-IPSL-CM5A-MR_SMHI-RCA4_v1',\
        'MIROC-MIROC5_SMHI-RCA4_v1',\
        'MOHC-HadGEM2-ES_SMHI-RCA4_v1',\
        'MPI-M-MPI-ESM-LR_SMHI-RCA4_v1',\
        'NCC-NorESM1-M_SMHI-RCA4_v1',\
        'NOAA-GFDL-GFDL-ESM2M_SMHI-RCA4_v1')

#each map is mean_ref[0,0,:,:].shape

mean_ref=np.array([[ctang.read_lonlatmap_netcdf(VAR,\
        'rsds_AFR-44_'+MODEL[i]+'.hist.day.1970-1999.SA.timmean.nc')] \
        for i in range(N_model)])

mean_future=np.array([[ctang.read_lonlatmap_netcdf(VAR,\
        'rsds_AFR-44_'+MODEL[i]+'.rcp85.day.2070-2099.SA.timmean.nc')] \
        for i in range(N_model)])

mean_change=np.mean(np.array((mean_future-mean_ref)*100/mean_ref),axis=1)

Emean_ref=np.mean(np.mean(mean_ref,axis=0),axis=0)

Emean_future=np.mean(np.mean(mean_future,axis=0),axis=0)

Emean_change=Emean_future-Emean_ref

print Emean_change.shape

lons,lats=ctang.read_lonlat_netcdf(\
        'rsds_AFR-44_'+MODEL[0]+'.hist.day.1970-1999.SA.timmean.nc')


print lats.min()


#--------------------------------------------------- 
# for t test in each point
T=2.262
t_value=mean_change*999
#--------------------------------------------------- 
def significant_map(mean_change,t_value):
    for m in range(N_model):
        for lat in range(mean_change.shape[1]):
            for lon in range(mean_change.shape[2]):
                if abs(stats.ttest_1samp(\
                        mean_change[:,lat,lon],mean_change[m,lat,lon])[0]) > T:
                    t_value[m,lat,lon]=mean_change[m,lat,lon]
                else:
                    t_value[m,lat,lon]=np.NaN
    return t_value
#--------------------------------------------------- 
t_value_mean=significant_map(mean_change,t_value)
print t_value
print t_value.shape

# The following criteria are used to
# consider them as either uncertain or negligible:
#   negligible: NaN >= N_model/2
#   uncertain:  at least 2 significant individual differ in sign
#   robust:     NaN < N_model/2, sum(abs(x_i)) = abs(sum(x_i))
count=1
for lat in range(mean_change.shape[1]):
    for lon in range(mean_change.shape[2]):
        #print (N_model-np.isnan(t_value[:,lat,lon]).sum(),np.abs(np.nansum(np.sign(t_value[:,lat,lon]))))
        if np.isnan(t_value[:,lat,lon]).sum() >= N_model/2:     # negligible
            t_value[:,lat,lon]=[ 99999 for t in range(N_model)] 
        else:
            if (N_model-np.isnan(t_value[:,lat,lon]).sum()) > np.abs(np.nansum(np.sign(t_value[:,lat,lon]))):
                t_value[:,lat,lon]=[-99999 for t in range(N_model)] # uncertain
            else:
                t_value[:,lat,lon]=t_value[:,lat,lon]
                print "get robust point",count
                count += 1


#print Ensmean_change_ttest.shape

#--------------------------------------------------- 
#=================================================== plot
Title='rsds change %'

fig1=plt.figure(figsize=(14,8))
ax = fig1.add_subplot(111)

map=Basemap(projection='cyl',llcrnrlat=lats.min(),urcrnrlat=lats.max(),\
         llcrnrlon=lons.min(),urcrnrlon=lons.max(),resolution='h')
map.drawcoastlines(linewidth=1)
map.drawparallels(np.arange(-90.,91.,10.),labels=[1,0,0,0],linewidth=0.5)
map.drawmeridians(np.arange(-180.,181.,20.),labels=[0,0,0,1],linewidth=0.5)
map.drawmapboundary()
map.drawcountries()

x,y=map(lats,lons)

Ensmean_change_ttest=np.nanmean(t_value,axis=0)

# define the colormap
cmap = plt.cm.jet
# extract all colors from the .jet map
cmaplist = [cmap(i) for i in range(cmap.N)]
# force the first color entry to be grey
cmaplist[0] = (.5,.5,.5,1.0)
cmaplist[-1] = (.8,.5,.5,1.0)
# create the new map
cmap = cmap.from_list('Custom cmap', cmaplist, cmap.N)
# define the bins and normalize
bounds = np.linspace(-15,15,21)
norm = mpl.colors.BoundaryNorm(bounds, cmap.N)


Ensmean_change_ttest=np.ma.masked_invalid(np.nanmean(t_value,axis=0))
#Ensmean_change_ttest=np.nanmean(t_value,axis=0)

cmap.set_bad('b',1.)

map.pcolormesh(y,x,Ensmean_change_ttest,cmap=cmap,norm=norm,\
        vmin=-np.abs(Emean_change).max(), vmax= np.abs(Emean_change).max())


minorLocator = AutoMinorLocator()
ax.yaxis.set_minor_locator(minorLocator)
ax.xaxis.set_minor_locator(minorLocator)

plt.title("\n".join(textwrap.wrap(Title,55)))
plt.colorbar(orientation='horizontal',shrink=0.8) # draw colorbar

# add some text
#plt.figtext(0.68,0.73,timestamp, size="small")

#=================================================== end of Plot

plt.savefig('map.meanchange.eps',format='eps')
plt.show()



quit()

mean_ref=np.array([\
        [237.852,245.599,246.257,262.295,230.489,190.593,166.733,160.106,158.951],\
        [255.244,265.716,247.884,255.947,226.192,196.924,184.545,172.934,181.030],\
        [236.166,249.347,246.382,261.617,228.407,190.462,168.592,161.196,160.335],\
        [235.607,248.206,233.363,254.455,224.365,192.893,181.815,170.435,176.945],\
        [233.750,241.292,241.220,263.050,229.795,189.251,167.108,159.045,162.359],\
        [245.812,254.990,244.300,255.062,219.548,194.735,174.890,166.246,167.678],\
        [241.842,252.905,239.756,255.623,225.336,186.996,173.761,164.433,167.057],\
        [244.258,250.552,237.856,256.792,226.179,189.628,171.436,162.644,163.961],\
        [241.110,254.445,244.158,253.585,218.580,197.410,168.943,161.433,159.681],\
        [234.960,244.997,233.827,253.364,223.168,189.201,168.682,159.879,163.381],\
        [240.660,250.805,241.500,257.179,225.206,191.809,172.651,163.835,166.138]])

mean_future=np.array([\
        [232.629,238.733,251.532,262.213,229.412,190.361,161.796,154.841,156.997],\
        [255.756,265.742,254.955,258.232,229.419,197.032,180.519,170.071,177.647],\
        [234.170,246.535,257.240,266.924,232.287,194.365,163.655,156.474,157.781],\
        [234.050,243.399,239.583,256.631,224.865,191.420,172.296,162.467,168.110],\
        [229.185,232.058,245.650,263.278,227.796,182.707,154.358,146.859,151.962],\
        [240.553,247.333,247.309,258.079,223.318,198.770,170.123,161.061,166.845],\
        [235.237,247.241,245.546,258.383,226.651,187.559,168.181,159.313,164.345],\
        [240.919,245.101,244.514,259.153,228.509,187.639,161.338,153.697,155.670],\
        [235.581,248.157,245.535,254.861,219.627,199.488,166.078,157.790,159.087],\
        [232.227,240.021,239.240,256.065,225.526,191.612,165.983,157.026,162.458],\
        [237.031,245.432,247.110,259.382,226.741,192.095,166.433,157.960,162.090]])

std_ref_day=np.array([\
        [15.201,25.710,25.966,19.919,20.437,37.349,42.792,43.989,48.127],\
        [18.082,25.788,27.537,27.113,23.908,37.474,43.545,48.075,49.276],\
        [16.104,27.121,24.550,21.723,20.195,34.354,39.919,43.003,47.415],\
        [17.702,28.721,28.463,27.927,23.741,39.223,45.328,48.584,50.869],\
        [18.252,29.178,31.350,23.060,22.580,41.995,47.545,49.642,53.421],\
        [16.318,26.870,25.492,26.764,22.608,35.442,36.714,39.868,43.269],\
        [16.724,27.120,26.927,26.056,23.116,36.106,44.282,47.145,50.203],\
        [19.034,28.027,28.814,27.053,24.100,39.732,47.604,49.381,52.828],\
        [17.444,28.101,26.024,25.454,21.647,37.617,37.279,40.306,42.209],\
        [17.709,28.092,27.562,25.043,23.298,37.786,43.062,45.678,47.034],\
        [17.257,27.473,27.268,25.011,22.563,37.708,42.807,45.567,48.465]])

std_ref_mon=np.array([\
        [6.225,11.638,11.054,7.917,9.846,13.029,12.685,12.451,13.122],\
        [7.302,11.788,11.360,10.829,10.639,13.114,12.644,12.808,14.355],\
        [6.677,12.356,11.311,8.570,9.663,12.911,12.074,11.621,12.895],\
        [8.173,12.275,11.700,12.010,11.027,15.294,14.984,15.187,15.648],\
        [6.893,11.130,13.330,9.662,10.680,15.268,15.557,15.814,16.250],\
        [6.413,11.792,11.083,10.825,10.070,14.294,10.816,10.692,11.802],\
        [7.134,12.198,10.302,10.104,10.299,12.764,13.624,13.324,14.775],\
        [8.298,11.839,11.503,10.262,9.861,14.080,13.980,13.683,14.271],\
        [7.419,12.748,11.229,10.836,10.116,15.719,11.865,11.947,12.084],\
        [8.480,12.837,12.103,11.010,11.315,13.622,12.441,12.221,12.960],\
        [7.301,12.060,11.498,10.202,10.352,14.009,13.067,12.975,13.816]])

std_ref_year=np.array([\
        [2.072,4.345,4.588,2.874,3.996,3.740,3.569,3.473,3.798],\
        [2.338,4.440,3.148,3.486,3.767,4.249,4.206,3.916,5.076],\
        [2.168,4.263,4.244,2.506,3.273,3.654,4.649,4.055,5.116],\
        [2.900,3.704,4.817,4.815,3.919,4.794,3.605,4.026,4.241],\
        [2.144,3.485,5.220,3.456,3.753,4.135,4.343,4.396,4.622],\
        [1.661,4.390,3.662,3.840,3.662,4.024,3.505,3.668,3.888],\
        [2.430,3.731,3.742,3.148,3.619,4.553,4.214,4.521,3.907],\
        [2.376,3.381,3.499,3.526,3.797,3.646,4.203,3.771,4.340],\
        [2.157,3.865,3.010,3.246,3.309,4.799,3.274,4.012,2.924],\
        [2.655,4.702,4.192,2.963,3.838,3.942,3.959,3.794,3.938],\
        [2.290,4.031,4.012,3.386,3.693,4.154,3.953,3.963,4.185]])

std_future_day=np.array([\
        [17.221,25.392,25.200,18.905,19.441,38.275,44.430,45.778,49.507],\
        [19.688,24.945,26.636,24.815,22.865,37.692,42.986,47.711,48.287],\
        [16.903,25.745,23.164,17.890,19.363,34.770,39.823,42.484,47.228],\
        [19.338,28.969,29.297,25.462,24.094,40.079,46.778,49.055,51.700],\
        [18.706,29.640,30.640,18.971,21.300,40.868,45.711,47.940,50.692],\
        [19.725,29.998,26.912,24.699,24.226,36.766,36.671,40.187,42.625],\
        [18.249,28.588,26.740,22.024,22.286,36.752,42.785,45.966,48.248],\
        [20.082,28.582,29.953,25.111,23.707,39.820,46.017,48.269,51.171],\
        [19.469,28.811,26.392,25.132,23.255,38.981,38.063,40.827,43.912],\
        [19.369,29.777,28.330,22.296,22.253,40.328,44.260,46.135,48.013],\
        [18.875,28.045,27.326,22.531,22.279,38.433,42.752,45.435,48.138]])

std_future_mon=np.array([\
        [6.901,11.082,11.838,8.126,8.418,14.005,13.978,13.424,15.007],\
        [7.201,10.469,10.082,10.019,9.857,13.165,11.950,12.978,12.990],\
        [6.465,10.881,10.653,6.994,8.816,12.739,12.225,11.779,13.527],\
        [8.113,12.624,12.465,10.517,10.354,14.994,14.645,14.259,15.335],\
        [7.450,11.936,13.862,8.162,9.529,14.974,16.278,15.569,17.382],\
        [8.525,13.828,12.280,10.420,11.015,15.170,11.112,11.323,12.327],\
        [7.440,12.622,9.997,8.950,8.714,13.690,13.095,13.036,14.154],\
        [7.501,11.451,12.186,10.258,10.452,14.050,12.656,12.405,13.692],\
        [7.175,11.907,12.046,9.887,10.343,16.663,12.329,12.047,13.057],\
        [8.679,13.736,12.061,9.546,10.338,13.897,12.206,12.068,12.997],\
        [7.545,12.053,11.747,9.288,9.784,14.335,13.047,12.889,14.047]])

std_future_year=np.array([\
        [2.324,3.118,2.889,2.772,2.220,4.949,3.238,3.110,3.631],\
        [1.808,2.771,2.143,3.784,3.629,3.835,4.167,4.664,4.015],\
        [2.265,3.207,3.038,2.634,2.880,4.192,3.239,2.940,3.785],\
        [2.793,4.092,3.583,3.944,3.715,4.005,4.088,4.089,4.456],\
        [2.970,4.625,4.271,2.638,2.855,4.707,4.292,4.218,4.514],\
        [2.836,5.447,3.271,3.314,3.811,4.734,3.474,3.382,4.142],\
        [2.403,3.951,3.129,2.647,1.732,4.673,3.436,3.433,3.346],\
        [2.230,3.827,4.800,3.611,4.266,5.035,3.897,4.366,4.188],\
        [2.371,3.786,3.609,3.559,4.476,4.451,3.709,3.435,3.761],\
        [2.664,3.982,4.155,3.854,2.966,4.021,3.708,3.476,3.774],\
        [2.466,3.881,3.489,3.276,3.255,4.460,3.725,3.711,3.961]])

#=================================================== cal
modelchange=((mean_future)-(mean_ref))*100/(mean_ref)
ensmeanchange=modelchange[10]

modelstddday=((std_future_day)-(std_ref_day))*100/(std_ref_day)
ensstdchangeday=modelstddday[10]


modelstddmon=((std_future_mon)-(std_ref_mon))*100/(std_ref_mon)
ensstdchangemon=modelstddmon[10]


modelstddyear=((std_future_year)-(std_ref_year))*100/(std_ref_year)
ensstdchangeyear=modelstddyear[10]

#=================================================== plot
ind = np.arange(1,N_region+1)   # num of regions
width = 0.35                    # the width of the bars

axes = plt.subplots(nrows=2, ncols=2,figsize=(10, 6),facecolor='w', edgecolor='k')
fig.subplots_adjust(bottom=0.15,hspace=0.8,wspace=0.4)
ax0, ax1, ax2, ax3 = axes.flatten()
#axes = axes.T.flatten() # reshape plot (2*2) to 4*1
axes = axes.flatten() # reshape plot (2*2) to 4*1


print ind
rects0 = ax0.bar(ind, ensmeanchange, width, color='orange',align='center',zorder=1)
rects1 = ax1.bar(ind, ensstdchangeday, width, color='green',align='center',zorder=1)
rects2 = ax2.bar(ind, ensstdchangemon, width, color='black',align='center',zorder=1)
rects3 = ax3.bar(ind, ensstdchangeyear, width, color='blue',align='center',zorder=1)


#-------------------- t-test in p<0.05,nof=10,2.228
def plot_individual_model(modelchange,k,T=2.228):
    """
    input array should be in 11 * 9 
    
    """
    for i in range(N_region):
        for j in range(N_model):
            t_value=stats.ttest_1samp(modelchange[0:N_model,i], modelchange[j,i])[0]
            #print abs(t_value),np.mean(modelchange[0:N_model,i]),\
                    #abs(modelchange[j,i]-np.mean(modelchange[0:N_model,i]))
            if abs(t_value) > T:
                axes[k].scatter((ind[i]),(modelchange[j,i]),s=10,\
                        facecolors='red',edgecolors='r',zorder=2)
            else:
                axes[k].scatter((ind[i]),(modelchange[j,i]),s=10,\
                        facecolors='none',edgecolors='r',zorder=2)

#--------------------------------------------------- end of function

plot_individual_model(modelchange,0)
plot_individual_model(modelstddday,1)
plot_individual_model(modelstddmon,2)
plot_individual_model(modelstddyear,3)



#=================================================== 
# add some text for labels, title and axes ticks


#ax0.legend((rects1[0], ('Men')))

# set ticks and tick labels
for k in range(4):
    axes[k].set_xlim((width, N_region+1))
    axes[k].set_xticks(ind )
    axes[k].set_xticklabels(('1', '2', '3', '4', '5', '6', '7', '8', '9'))
    axes[k].set_xlabel('Region',fontsize=14)
    axes[k].spines['left'].set_linewidth(2)
    axes[k].spines['bottom'].set_linewidth(2)
    axes[k].tick_params(direction='out',length=6,width=2,labelsize=12)

    #axes[0].set_ylim((-10, 10))
    #axes[1].set_ylim((-15, 15))
    #axes[2].set_ylim((-15, 15))
    #axes[3].set_ylim((-35, 35))

    #axes[k].set_yticks([-1, 0, 1])
    #axes[k].set_title(Title[k],fontsize=14)
    axes[k].set_ylabel('Changes   %', fontsize=14)
    #axes[k].set_yscale('symlog')
    
    axes[k].set_axisbelow(True)
    axes[k].yaxis.grid(color='gray', linestyle='dashed')
    axes[k].xaxis.grid(color='gray', linestyle='dashed')
    #axes[k].yaxis.set_minor_formatter(NullFormatter())
    minorLocator = AutoMinorLocator()
    axes[k].yaxis.set_minor_locator(minorLocator)

    # Hide the right and top spines
    axes[k].spines['right'].set_visible(False)
    axes[k].spines['top'].set_visible(False)
    # Only show ticks on the left and bottom spines
    axes[k].yaxis.set_ticks_position('left')
    axes[k].xaxis.set_ticks_position('bottom')

    axes[k].axhline(y=0, xmin=0, xmax=N_region+1,color='black',linewidth=2)

#=================================================== end of plot

#plt.savefig('filename.eps', format='eps')
plt.savefig('colormap.pdf', dpi = 1200)
#plt.show()
