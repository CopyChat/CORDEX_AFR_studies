#!/usr/bin/env python
"""
========
Ctang, A bar plot of time variability changes projection 
        from CORDEX AFR-44, in Southern Africa
        Data was restored on titan
========
"""
import math
import subprocess
import numpy as np
import matplotlib.pyplot as plt
from scipy import stats
from matplotlib.ticker import AutoMinorLocator


# to load my functions
import sys 
sys.path.append('/Users/ctang/Code/My_Python_Code/')
import ctang

#=================================================== Definitions

#---------------------------------------------------  data
# 11 * 9 table: generated by time.variability.function.sh

    #               region_1 region_2 ... region_N_region
    #  model_1
    #  model_2
    #  ...
    #  model_N_model
    #  ens
#--------------------------------------------------- 

#=================================================== Definitions
Data='/Users/ctang/Code/CORDEX_AFR_studies/data/time_variability/'
N_region = 7
N_model = 21
VAR ='rsds'
T = 2.086 

RCM_Model=(\
	'CCCma-CanESM2_SMHI-RCA4_v1',\
	'CNRM-CERFACS-CNRM-CM5_SMHI-RCA4_v1',\
	'CSIRO-QCCCE-CSIRO-Mk3-6-0_SMHI-RCA4_v1',\
	'ICHEC-EC-EARTH_SMHI-RCA4_v1',\
	'IPSL-IPSL-CM5A-MR_SMHI-RCA4_v1',\
	'MIROC-MIROC5_SMHI-RCA4_v1',\
	'MOHC-HadGEM2-ES_SMHI-RCA4_v1',\
	'MPI-M-MPI-ESM-LR_SMHI-RCA4_v1',\
	'NCC-NorESM1-M_SMHI-RCA4_v1',\
	'NOAA-GFDL-GFDL-ESM2M_SMHI-RCA4_v1',\
        \
	'CNRM-CERFACS-CNRM-CM5_CLMcom-CCLM4-8-17_v1',\
	'ICHEC-EC-EARTH_CLMcom-CCLM4-8-17_v1',\
	'MOHC-HadGEM2-ES_CLMcom-CCLM4-8-17_v1',\
	'MPI-M-MPI-ESM-LR_CLMcom-CCLM4-8-17_v1',\
	'ICHEC-EC-EARTH_DMI-HIRHAM5_v2',\
	'NCC-NorESM1-M_DMI-HIRHAM5_v1',\
	'ICHEC-EC-EARTH_KNMI-RACMO22T_v1',\
	'MOHC-HadGEM2-ES_KNMI-RACMO22T_v2',\
	'ICHEC-EC-EARTH_MPI-CSC-REMO2009_v1',\
	'IPSL-IPSL-CM5A-LR_GERICS-REMO2009_v1',\
	'MPI-M-MPI-ESM-LR_MPI-CSC-REMO2009_v1')

#=================================================== reading data
# 21 * 4 table: 21 models vs 4 vars



histfix='.hist.day.1970-1999.'
rcp85fix = '.rcp85.day.2070-2099.'

filefix = (\
        '.fldmean.timmean.nc',\
        '.fldmean.detrend.nc.daymean.maskannual.timstd.nc',\
        '.fldmean.detrend.nc.monmean.maskannual.timstd.nc',\
        '.fldmean.detrend.nc.yearmean.masknoooon.timstd.nc')

Ref = np.zeros(( 4,N_model, N_region))
t_value = np.zeros(( N_model, N_region))
Future = np.zeros((4, N_model, N_region))

# Read timmean for in each region, used for significance calculation
# the significance of mean changes over each region, this map of this map
# will be used for the time variability
# the loaded data will be in 4D map: N_model, N_region, lat,lon

print Data+VAR+'_AFR-44_'+RCM_Model[0]+histfix+str(1+1)+filefix[0]


# Read for CORDEX & OBS
def reading(Ref,Future):
    for v in range(4):
        for i in range(N_model):
            Ref[v,i]=np.array([ctang.read_lonlatmap_netcdf(VAR,\
                Data+VAR+'_AFR-44_'+RCM_Model[i]+histfix+str(k+1)+filefix[v])[0,0]\
                for k in range(N_region)])
            Future[v,i]=np.array([ctang.read_lonlatmap_netcdf(VAR,\
                Data+VAR+'_AFR-44_'+RCM_Model[i]+rcp85fix+str(k+1)+filefix[v])[0,0]\
                for k in range(N_region)])
    return Ref,Future
#=================================================== 
def significanceMap(N_model,N_region,t_value):
    for m in range(N_model):
        for i in range(N_region):
            Ref_map=np.array([ctang.read_lonlatmap_netcdf(VAR,\
                Data+VAR+'_AFR-44_'+RCM_Model[m]+histfix+str(i+1)+'.timmean.nc')])
            Future_map=np.array([ctang.read_lonlatmap_netcdf(VAR,\
                Data+VAR+'_AFR-44_'+RCM_Model[m]+rcp85fix+str(i+1)+'.timmean.nc')])
            Change_map = Future_map - Ref_map
            if abs(stats.ttest_1samp(Change_map[0].flatten(),0)[0]) > T:
                t_value[m,i] = 1
    return t_value

#=================================================== 

#Ref,Future = reading(Ref,Future)
#ctang.Save2mat('Ref',Ref) # save to txt file to save time
#ctang.Save2mat('Future',Future) # save to txt file to save time

Ref = ctang.Loadmat('Ref')
Future = ctang.Loadmat('Future')
#=================================================== cal
#Ref[0][ Ref[0] == 0 ] = np.nan
Changes = np.array([(Future[i] - Ref[i])*100/Ref[0] for i in range(4)])
Emean_Changes = np.mean( Changes, axis = 1)

#--------------------------------------------------- t-test
t_value = significanceMap(N_model,N_region,t_value)
#=================================================== plot
ind = np.arange(1,N_region+1)   # num of regions
width = 0.35                    # the width of the bars

fig, axes = plt.subplots(nrows=2, ncols=2,figsize=(10, 6),facecolor='w', edgecolor='k')
fig.subplots_adjust(bottom=0.15,hspace=0.8,wspace=0.4)
ax0, ax1, ax2, ax3 = axes.flatten()
axes = axes.flatten() # reshape plot (2*2) to 4*1


print ind
rects0 = ax0.bar(ind, Emean_Changes[0], width, color='orange',align='center',zorder=1)
rects1 = ax1.bar(ind, Emean_Changes[1], width, color='green',align='center',zorder=1)
rects2 = ax2.bar(ind, Emean_Changes[2], width, color='black',align='center',zorder=1)
rects3 = ax3.bar(ind, Emean_Changes[3], width, color='blue',align='center',zorder=1)


#-------------------- t-test in p<0.05,nof=20,2.086
def plot_individual_model(modelchange,T=2.086):
    """
    input array should be in 11 * 9 
    
    """
    for v in range(4):
        for i in range(N_region):
            for j in range(N_model):
                if abs(t_value[j,i]) > 0:
                    axes[v].scatter((ind[i]),(modelchange[v,j,i]),s=10,\
                        facecolors='red',edgecolors='r',zorder=2)
                else:
                    axes[v].scatter((ind[i]),(modelchange[v,j,i]),s=10,\
                        facecolors='none',edgecolors='b',zorder=2)

#--------------------------------------------------- end of function
plot_individual_model(Changes,T)



#=================================================== 
# add some text for labels, title and axes ticks

Title=['mean', 'daily variability', 'monthly variability', 'annual variability']

#ax0.legend((rects1[0], ('Men')))

# set ticks and tick labels
for k in range(4):
    axes[k].set_xlim((width, N_region+1))
    axes[k].set_xticks(ind )
    axes[k].set_xticklabels(('1', '2', '3', '4', '5', '6', '7', '8', '9'))
    axes[k].set_xlabel('Region',fontsize=14)
    axes[k].spines['left'].set_linewidth(2)
    axes[k].spines['bottom'].set_linewidth(2)
    axes[k].tick_params(direction='out',length=6,width=2,labelsize=12)

    #axes[0].set_ylim((-10, 10))
    #axes[1].set_ylim((-15, 15))
    #axes[2].set_ylim((-15, 15))
    #axes[3].set_ylim((-35, 35))

    #axes[k].set_yticks([-1, 0, 1])
    axes[k].set_title(Title[k],fontsize=14)
    axes[k].set_ylabel('Changes   %', fontsize=14)
    #axes[k].set_yscale('symlog')
    
    axes[k].set_axisbelow(True)
    axes[k].yaxis.grid(color='gray', linestyle='dashed')
    axes[k].xaxis.grid(color='gray', linestyle='dashed')
    #axes[k].yaxis.set_minor_formatter(NullFormatter())
    minorLocator = AutoMinorLocator()
    axes[k].yaxis.set_minor_locator(minorLocator)

    # Hide the right and top spines
    axes[k].spines['right'].set_visible(False)
    axes[k].spines['top'].set_visible(False)
    # Only show ticks on the left and bottom spines
    axes[k].yaxis.set_ticks_position('left')
    axes[k].xaxis.set_ticks_position('bottom')

    axes[k].axhline(y=0, xmin=0, xmax=N_region+1,color='black',linewidth=2)

#=================================================== end of plot
plt.suptitle('Projected changes in the mean and the time variability of RSDS',fontsize=16)

#plt.savefig('time.variability.eps', format='eps')
plt.savefig('time.variability.png')
plt.show()
